service: spectrio-portal # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  #timeout: 30 # optional, in seconds, default is 6
  environment:
    DYNAMODB_CUSTOMERS_TABLE: purple-${opt:stage, self:provider.stage}-customers
    DYNAMODB_VENUES_TABLE: purple-${opt:stage, self:provider.stage}-venues
    DYNAMODB_VENUE_DAILY_TOTALS_TABLE: purple-${opt:stage, self:provider.stage}-venue-daily-totals
    DYNAMODB_CUSTOMER_DAILY_TOTALS_TABLE: purple-${opt:stage, self:provider.stage}-customer-daily-totals
    DYNAMODB_VISITS_TABLE: purple-${opt:stage, self:provider.stage}-visits
    DYNAMODB_VISITORS_TABLE: purple-${opt:stage, self:provider.stage}-visitors
    ELASTICSEARCH_CALL_LOG_INDEX: phone-${opt:stage, self:provider.stage}-calllogs
    REGION: us-east-1
    STAGE: dev
    ELASTIC_URL:
      Fn::GetAtt: [ CallLogESDomain , DomainEndpoint ]
    IMPORT_CALL_LOGS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - importCallLogs
    AGGREGATE_CUSTOMER_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateCustomerVisitors
    AGGREGATE_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateVisitors
    AGGREGATE_VENUE_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateVenueVisitors
      
  region: ${self:provider.environment.REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: "*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"
functions:
  purpleProxy:
    handler: /handlers/proxy.default
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleProxy
    timeout: 29
    events:
      - http:
          path: purpleProxy
          method: get
          cors: true
  purpleStore:
    handler: /handlers/store.default
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleStore
    events:
      - http:
          path: purpleStore
          method: get
          cors: true
  purpleAggregateCustomerVisitors:
    handler: /handlers/aggregate.calculateVenuesDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleAggregateCustomerVisitors
    timeout: 300
    events:
      - http:
          path: purpleAggregateVenueVisitors
          method: get
          cors: true
      - sns: aggregateVisitors
  purpleAggregateVenueVisitors:
    handler: /handlers/aggregate.calculateVenueDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleAggregateVenueVisitors
    timeout: 300
    events:
      - http:
          path: purpleAggregateVenueVisitors
          method: get
          cors: true
      - sns: aggregateVenueVisitors
  purpleAggregateAllCustomerVisitors:
    handler: /handlers/aggregate.calculateAllVenuesDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleAggregateAllCustomerVisitors
    timeout: 300
    events:
      - http:
          path: purpleAggregateAllVenueVisitors
          method: get
          cors: true
      - schedule: cron(0 1 * * ? *)
  purpleAggregateCustomerVisitorsForReal:
    handler: /handlers/aggregate.calculateCustomerDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleAggregateCustomerVisitorsForReal
    timeout: 300
    events:
      - http:
          path: purpleAggregateCustomerVisitors
          method: get
          cors: true
      - sns: aggregateCustomerVisitors
  purpleAggregateTotalCustomerVisitors:
    handler: /handlers/aggregate.calculateAllCustomerDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleAggregateCustomerDailyVisitors
    timeout: 300
    events:
      - http:
          path: purpleAggregateAllCustomerVisitors
          method: get
          cors: true
      - schedule: cron(0 3 * * ? *)
  purpleFetchVenueDailyTotals:
    handler: /handlers/aggregate.fetchVenueDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-purpleFetchVenueDailyTotals
    timeout: 300
    events:
      - http:
          path: purpleFetchVenueDailyTotals
          method: get
          cors: true
  customer:
    handler: /handlers/customer.default
    name: ${self:service}-${opt:stage, self:provider.stage}-customer
    events:
      - http:
          path: customer/{id}
          method: get
          cors: true
      - http:
          path: customer/{id}
          method: post
          cors: true
      - http:
          path: customer/{id}
          method: put
          cors: true
      - http:
          path: customer/{id}
          method: delete
          cors: true
  customers:
    handler: /handlers/customer.default
    name: ${self:service}-${opt:stage, self:provider.stage}-customers
    events:
      - http:
          path: customers
          method: get
          cors: true
  callLog:
    handler: /handlers/calllog.search
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log
    timeout: 29
    events:
      - http:
          path: callLogSearch
          method: get
          cors: true
      - http:
          path: callLogSearch
          method: post
          cors: true
  callLogAggregate:
    handler: /handlers/calllog.aggregate
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-aggregate
    timeout: 29
    events:
      - http:
          path: callLogAggregate
          method: get
          cors: true
  callLogPost:
    handler: /handlers/calllog.post
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-post
    timeout: 29
    events:
      - http:
          path: callLogPost
          method: get
          cors: true
  callLogUpdateMapping:
    handler: /handlers/calllog.updateMapping
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-mapping
    timeout: 29
    events:
      - http:
          path: callLogMapping
          method: get
          cors: true
  callLogUpdateInit:
    handler: /handlers/calllog.init
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-init
    timeout: 29
    events:
      - http:
          path: callLogInit
          method: get
          cors: true
  callLogDrop:
    handler: /handlers/calllog.drop
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-drop
    timeout: 29
    events:
      - http:
          path: callLogDrop
          method: get
          cors: true
  callLogDropAll:
    handler: /handlers/calllog.dropAll
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-drop-all
    timeout: 29
    events:
      - http:
          path: callLogDropAll
          method: get
          cors: true
  callLogImport:
    handler: /handlers/calllog.import
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-import
    timeout: 300
    events:
      - http:
          path: callLogImport
          method: get
          cors: true
      - sns: importCallLogs
  callLogImportAll:
    handler: /handlers/calllog.importAll
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-import-all
    timeout: 300
    events:
      - http:
          path: callLogImportAll
          method: get
          cors: true
      - schedule: cron(0 1 * * ? *)

resources:
  Resources:
    CustomersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMERS_TABLE}
    VenuesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VENUES_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VENUES_TABLE}
    VenueDailyTotalsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
          -
            AttributeName: customerVenueId
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
              -
                AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
          - IndexName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}-customer-venue-index
            KeySchema:
              -
                AttributeName: customerVenueId
                KeyType: HASH
              -
                AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}
    CustomerDailyTotalsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMER_DAILY_TOTALS_TABLE}
    VisitsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VISITS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VISITS_TABLE}
    VisitorsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VISITORS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VISITORS_TABLE}
    CallLogESDomain:
      Type: "AWS::Elasticsearch::Domain"
      Properties: 
        DomainName: ${self:provider.environment.ELASTICSEARCH_CALL_LOG_INDEX}
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        ElasticsearchVersion: 6.2
